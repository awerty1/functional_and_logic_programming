/*
5. Реализовать процедуру для вычисления глубины списка (самой глубокой ветви).         
Пример: у списка [[a,b],c,[e,[f,[[g,e,p],v],y]],x] глубина равна 5.
*/

% Определяем предикат для вычисления глубины списка
depth([], 0). % Пустой список имеет глубину 0
depth(List, Depth) :- 
    is_list(List), % Проверяем, является ли List списком
    depth_list(List, 1, Depth). % Если список, вызываем вспомогательный предикат для вычисления глубины с начальным значением глубины 1

depth(NonList, 0) :- % Предикат для элементов, которые не являются списками
    \+ is_list(NonList). % Если NonList не является списком, глубина равна 0

% Вспомогательный предикат для вычисления глубины списка
depth_list([], CurrentDepth, CurrentDepth). % Когда список пуст, текущая глубина равна окончательной глубине
depth_list([H|T], CurrentDepth, Depth) :- % Перебор элементов списка
    NextDepth is CurrentDepth + 1, % Увеличиваем текущую глубину на 1 для следующего элемента
    depth(H, HD), % Рекурсивный вызов для глубины текущего элемента
    depth_list(T, NextDepth, TD), % Рекурсивный вызов для оставшейся части списка
    Depth is max(HD, TD). % Выбираем максимальную глубину между текущим элементом и оставшейся частью списка

% Пример использования:
main :- % Главный предикат
    depth([[a,b],c,[e,[f,[[g,e,p],v],y]],x], Depth), % Вычисляем глубину заданного списка
    write(Depth), % Выводим глубину
    halt. % Завершаем программу

:- main. % Запускаем главный предикат